//
//  eVoiceTimer.m
//  DocinBookReader
//
//  Created by docin on 11-12-8.
//  Copyright (c) 2011年 __MyCompanyName__. All rights reserved.
//

#import "eVoiceTimer.h"
#import "Debug.h"
#import "eVoicePlayer.h"

@interface UIApplication (eVoiceTimerApplication)

- (void)eVoiceTimeOut:(NSTimer *)timer;

@end

@implementation UIApplication (eVoiceTimerApplication)

- (void)eVoiceTimeOut:(NSTimer *)timer
{
    CMLog(@"----eVoiceTimer timeOut----");
    [[eVoicePlayer sharedInstance] stopPlay];
}

@end


#define kEvaluateDoubleValue 0.001

// eVoice Timer
static eVoiceTimer *evTimer = nil;
// 播放时长
static NSTimeInterval evInterval = 0.0;
// 剩余播放时长
static NSTimeInterval overInterval = 0.0;

@interface eVoiceTimer () 

@property (assign) UIBackgroundTaskIdentifier timerTask;
@property (retain) NSTimer *timer;
@property (assign) BOOL hasTimerInBackground;

- (void)backgroundTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo;

- (void)cancel;

- (id)userInfo;

- (void)run:(NSDictionary *)params;

@end

@implementation eVoiceTimer

@synthesize timerTask;
@synthesize timer;
@synthesize hasTimerInBackground;

- (void)dealloc
{
    [self cancel];
    [timer release];
    [timerThread release];
    [super dealloc];
}

- (void)cancel
{
    if (nil != timer) {
        @synchronized(self) {
            if ([timer isValid]) {
                [timer invalidate];
            }
        }
    }
}

- (id)userInfo
{
    return [timer userInfo];
}

- (void)backgroundTimerWithTimeInterval:(NSTimeInterval)ti target:(id)aTarget selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)yesOrNo
{
    if (self.hasTimerInBackground) {
        return;
    }
    UIApplication *app = [UIApplication sharedApplication];
    self.timerTask = [app beginBackgroundTaskWithExpirationHandler:^{
        [app endBackgroundTask:self.timerTask];
        self.timerTask = UIBackgroundTaskInvalid;
    }];
    CMLog(@"--开始播放时长定时器任务：%d", timerTask);
    
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        
        NSMutableDictionary *params = [[[NSMutableDictionary alloc] init] autorelease];
        [params setObject:[NSNumber numberWithDouble:ti] forKey:@"timeInterval"];
        if (nil != aTarget) {
            [params setObject:aTarget forKey:@"target"];
        }
        [params setObject:NSStringFromSelector(aSelector) forKey:@"selector"];
        if (nil != userInfo) {
            [params setObject:userInfo forKey:@"userInfo"];
        }
        [params setObject:[NSNumber numberWithBool:yesOrNo] forKey:@"repeats"];
        
        [timerThread release];
        timerThread = nil;
        timerThread = [[NSThread alloc] initWithTarget:self selector:@selector(run:) object:params];
        timerThread.name = @"timer-Thread";
        [timerThread start];
    });
    
    self.hasTimerInBackground = YES;
}

- (void)run:(NSDictionary *)params 
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    
    NSTimeInterval ti = [[params objectForKey:@"timeInterval"] doubleValue];
    id tg = [params objectForKey:@"target"];
    SEL sel = NSSelectorFromString([params objectForKey:@"selector"]);
    id userInfo = [params objectForKey:@"userInfo"];
    BOOL repeats = [[params objectForKey:@"repeats"] boolValue];
    
    NSTimer *timr = [NSTimer scheduledTimerWithTimeInterval:ti target:tg selector:sel userInfo:userInfo repeats:repeats];
    self.timer = timr;
    
    while (![timerThread isCancelled] && [timr isValid]) {
        [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:3.0]];
    }
    
    if ([timr isValid]) {
        [timr invalidate];
    }
    self.timer = nil;
    
    UIApplication *app = [UIApplication sharedApplication];
    [app endBackgroundTask:timerTask];
    CMLog(@"--停止播放时长定时器任务：%d", timerTask);
    timerTask = UIBackgroundTaskInvalid;
    
    [pool release];
    
    self.hasTimerInBackground = NO;
}

#pragma mark - eVioce Timer

+ (void)setTimerInterval:(NSTimeInterval)second 
{
    evInterval = second;
}

+ (void)stopeVoiceTimer 
{
    [evTimer cancel];
    [evTimer release];
    evTimer = nil;
    overInterval = 0.0;
}

+ (void)pauseeVoiceTimer 
{
    /*
    NSDate *start = (NSDate *)[evTimer userInfo];
    if (nil != start) {
        NSTimeInterval end = [[NSDate date] timeIntervalSinceDate:start];
        if (evInterval - end > kZeroDoubleValue) {
            overInterval = evInterval - end;
        } else {
            overInterval = 0.0;
        }
    } else {
        overInterval = 0.0;
    }
    [eVoiceTimer stopeVoiceTimer];
     */
}

+ (void)resumeeVoiceTimer
{
    /*
    if (overInterval > kZeroDoubleValue) {
        [eVoiceTimer starteVoiceTimer:overInterval];
    } else {
        overInterval = 0.0;
    }
     */
}

+ (void)starteVoiceTimer
{
    [self starteVoiceTimer:evInterval];
}

+ (void)starteVoiceTimer:(NSTimeInterval)second
{
    [self stopeVoiceTimer];
    evInterval = second;
    overInterval = 0.0;
    
    if (evInterval < kEvaluateDoubleValue) {
        return;
    }
    eVoiceTimer *timer = [[eVoiceTimer alloc] init];
    [evTimer release];
    evTimer = nil;
    evTimer = timer;
    [timer backgroundTimerWithTimeInterval:second target:[UIApplication sharedApplication] selector:@selector(eVoiceTimeOut:) userInfo:nil repeats:NO];
}

@end
