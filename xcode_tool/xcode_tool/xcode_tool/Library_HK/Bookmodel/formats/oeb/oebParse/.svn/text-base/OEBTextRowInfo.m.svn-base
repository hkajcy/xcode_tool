//
//  OEBTextRowInfo.m
//  docinBookReader
//
//  Created by 黄柯 on 12-3-22.
//  Copyright (c) 2012年 __MyCompanyName__. All rights reserved.
//

#import "OEBTextRowInfo.h"
#import "OEBLocation.h"
#import "accessibilityElement.h"
#import "Debug.h"
#import "OEBTextModel.h"
#import "OEBTextRowInfoSelectFun.h"
@implementation OEBTextRowInfo

@synthesize textModel;
@synthesize content;
@synthesize startLoc;
@synthesize stopLoc;
@synthesize startPlayingLocx;
@synthesize stopPlayingLoc;

@synthesize drawOriginalX = _drawOriginalX;
@synthesize drawOriginalY = _drawOriginalY;
@synthesize drawTextWidth = _drawTextWidth;
@synthesize drawTextHeight = _drawTextHeight;
@synthesize drawViewWidth = _drawViewWidth;
@synthesize drawViewHeight = _drawViewHeight;


@synthesize scale;
@synthesize drawColor;
@synthesize drawFont;
@synthesize drawImage;

@synthesize contentRect;
@synthesize accessibilityArray;

@synthesize isRecreated;

@synthesize isIndent;

@synthesize selectStopLocation;
@synthesize selectStartLocation;
@synthesize isSelecting;

@synthesize startSelectingElement;
@synthesize stopSelectingElement;

- (void) setLine:(CTLineRef)line
{
    if (lineRef != line)
    {
        CFSAFE_RELEASE(lineRef)
        lineRef = CFRetain(line);
        drawLineRef = lineRef;
    }
}

- (void) reCreateWithStartSpecLoc:(id)startSpecLoc
                  withStopSpecLoc:(id)stopSpecLoc
{
    CFSAFE_RELEASE(colorLineRef)
    drawLineRef = lineRef;
    isRecreated = NO;
    
    OEBLocation* startSLoc = (OEBLocation*)startSpecLoc;
    OEBLocation* stopSLoc = (OEBLocation*)stopSpecLoc;
    
    if (startSLoc == nil
        || stopSLoc == nil)
    {
        return;
    }
    
    if (![startSLoc.href isEqualToString:self.startLoc.href])
    {
        return;
    }
    
    if ([content isKindOfClass:[NSAttributedString class]])
    {
        
        NSRange colorRange = NSMakeRange(0, 0);
        if ([startSLoc isBackwardFrom:self.startLoc]
            && [stopSLoc isForwardFrom:self.startLoc]
            && ![stopSLoc isForwardFrom:self.stopLoc]) 
        {
            colorRange.location = 0;
            colorRange.length = [textModel stringLengthFromLocation:startLoc toLocation:stopSLoc];
        }
        else if (![startSLoc isForwardFrom:self.startLoc]
                 && ![stopSLoc isBackwardFrom:self.stopLoc])
        {
            colorRange.location = 0;
            colorRange.length = [self.content length];
        }
        else if (![startSLoc isBackwardFrom:self.startLoc]
                 && ![startSLoc isForwardFrom:self.stopLoc]
                 && ![stopSLoc isForwardFrom:self.stopLoc])
        {
            colorRange.location = [textModel stringLengthFromLocation:startLoc toLocation:startSLoc];
            colorRange.length = [textModel stringLengthFromLocation:startSLoc toLocation:stopSLoc];
        }
        else if ([stopSLoc isForwardFrom:self.stopLoc]
                 && ![startSLoc isBackwardFrom:self.startLoc]
                 && [startSLoc isBackwardFrom:self.stopLoc])
        {
            colorRange.location = [textModel stringLengthFromLocation:startLoc toLocation:startSLoc];
            colorRange.length = [textModel stringLengthFromLocation:startSLoc toLocation:stopLoc];
        }
    
        if (colorRange.length != 0)
        {
            NSMutableAttributedString* attStr = [[[NSMutableAttributedString alloc] initWithAttributedString:content] autorelease];
            CGColorRef color = [UIColor redColor].CGColor;
            [attStr addAttribute:(NSString*)kCTForegroundColorAttributeName value:(id)color range:colorRange];
            
            //因为之前是给一段话加了Indent，所以，这里不是一段话开始的话，要把这个Indent去掉
            if (!isIndent)
            {
                //设置段落属性
                /**************************************************************************************************************************/
                NSDictionary* dic = [attStr attributesAtIndex:0 effectiveRange:nil];
                
                CTParagraphStyleRef styleT = (CTParagraphStyleRef)[dic objectForKey:(id)kCTParagraphStyleAttributeName];
                
                CTTextAlignment alignment;
                CTParagraphStyleGetValueForSpecifier(styleT, kCTParagraphStyleSpecifierAlignment, sizeof(CTTextAlignment), &alignment);
                
                int ParagraphStylesSupported = 10;
                CTParagraphStyleSetting settings[ParagraphStylesSupported];
                CGFloat floatValues[ParagraphStylesSupported];
                
                int settingsIndex = 0;
                settings[settingsIndex].spec =     kCTParagraphStyleSpecifierFirstLineHeadIndent;settingsIndex++;
                settings[settingsIndex].spec =     kCTParagraphStyleSpecifierHeadIndent;settingsIndex++;
                settings[settingsIndex].spec =     kCTParagraphStyleSpecifierTailIndent;settingsIndex++;
                settings[settingsIndex].spec =     kCTParagraphStyleSpecifierDefaultTabInterval;settingsIndex++;
                settings[settingsIndex].spec =     kCTParagraphStyleSpecifierLineSpacingAdjustment;settingsIndex++;
                settings[settingsIndex].spec =     kCTParagraphStyleSpecifierParagraphSpacing;settingsIndex++;
                settings[settingsIndex].spec =     kCTParagraphStyleSpecifierParagraphSpacingBefore;settingsIndex++;
                settings[settingsIndex].spec =     kCTParagraphStyleSpecifierLineBreakMode;settingsIndex++;
                
                CGFloat value[] = 
                {   0 , //kCTParagraphStyleSpecifierFirstLineHeadIndent;
                    0 , //kCTParagraphStyleSpecifierHeadIndent;
                    0 , //kCTParagraphStyleSpecifierTailIndent;
                    0 , //kCTParagraphStyleSpecifierDefaultTabInterval;
                    0 , //kCTParagraphStyleSpecifierLineSpacingAdjustment;
                    0 , //kCTParagraphStyleSpecifierParagraphSpacing;
                    0 , //kCTParagraphStyleSpecifierParagraphSpacingBefore;
                    0 , //kCTParagraphStyleSpecifierLineBreakMode
                    /*
                     kCTLineBreakByWordWrapping = 0,
                     kCTLineBreakByCharWrapping = 1,
                     kCTLineBreakByClipping = 2,
                     kCTLineBreakByTruncatingHead = 3,
                     kCTLineBreakByTruncatingTail = 4,
                     kCTLineBreakByTruncatingMiddle = 5
                     */
                };
                
                NSUInteger styleIndex;
                for (styleIndex=0; styleIndex<settingsIndex; styleIndex++) {
                    settings[styleIndex].valueSize = sizeof(CGFloat);
                    floatValues[styleIndex] = value[styleIndex];
                    settings[styleIndex].value = &floatValues[styleIndex];
                }
                
                settings[settingsIndex].spec = kCTParagraphStyleSpecifierAlignment;
                settings[settingsIndex].valueSize = sizeof(CTTextAlignment);
                settings[settingsIndex].value = &alignment;
                settingsIndex++;
                
                CTParagraphStyleRef style = AUTO_RELEASED_CTREF(CTParagraphStyleCreate((const CTParagraphStyleSetting*) settings, settingsIndex));
                [attStr addAttribute:(NSString*)kCTParagraphStyleAttributeName value:(id)style range:NSMakeRange(0, [attStr length])];
                /**************************************************************************************************************************/
            }
            
            CTFramesetterRef frameSetter = AUTO_RELEASED_CTREF(CTFramesetterCreateWithAttributedString((CFAttributedStringRef)attStr));
            
            CGRect drawRect = CGRectMake(_drawOriginalX, _drawViewHeight - _drawOriginalY - _drawTextHeight, _drawTextWidth, 1000 * _drawTextHeight);
            CGMutablePathRef path = AUTO_RELEASED_CTREF(CGPathCreateMutable());
            CGPathAddRect(path, NULL, drawRect);
            
            CTFrameRef frame = AUTO_RELEASED_CTREF(CTFramesetterCreateFrame(frameSetter, CFRangeMake(0, 0), path, nil));
            NSArray* array = (NSArray*)CTFrameGetLines(frame);
            
            colorLineRef = (CTLineRef)[array objectAtIndex:0];
            CFRetain(colorLineRef);
            drawLineRef = colorLineRef;
            isRecreated = YES;
        }
        else if (isRecreated)
        {
        }
    }
    else
    {
        return;

    }
}

- (void) drawInContext:(CGContextRef)context
{
    CGContextSaveGState(context);
    if (lineRef)
    {
        [self drawSelectAreaInContext:context];
        
        CGContextSetTextPosition(context, _drawOriginalX, _drawViewHeight - _drawOriginalY - _drawTextHeight);
        CTLineDraw(drawLineRef, context);
    }
    else
    {
        CGRect rect = CGRectMake(_drawOriginalX,
                                 _drawViewHeight - _drawOriginalY - _drawTextHeight,
                                 _drawTextWidth,
                                 _drawTextHeight);
        CGContextDrawImage(context, rect, [drawImage CGImage]);
    }
    CGContextRestoreGState(context);
}

- (accessibilityElement*) startSelectingElement
{
    if (startSelectingElement == nil)
    {
        [self createSelectingElement];
    }
    return startSelectingElement;
}

- (accessibilityElement*) stopSelectingElement
{
    if (stopSelectingElement == nil)
    {
        [self createSelectingElement];
    }
    return stopSelectingElement;
}

- (void) dealloc
{
    SAFE_RELEASE(content)
    SAFE_RELEASE(startLoc)
    SAFE_RELEASE(stopLoc)
    SAFE_RELEASE(startPlayingLocx)
    SAFE_RELEASE(stopPlayingLoc)
    SAFE_RELEASE(drawColor)
    SAFE_RELEASE(drawFont)
    SAFE_RELEASE(drawImage)
    SAFE_RELEASE(accessibilityArray)
    
    CFSAFE_RELEASE(colorLineRef)
    CFSAFE_RELEASE(lineRef);
    
    SAFE_RELEASE(startSelectingElement)
    SAFE_RELEASE(stopSelectingElement)
    SAFE_RELEASE(selectStartLocation)
    SAFE_RELEASE(selectStopLocation)
    [super dealloc];
}
@end
