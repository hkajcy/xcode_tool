//
//  txtPage.m
//  docinBookReader
//
//  Created by  on 11-9-9.
//  Copyright 2011å¹´ __MyCompanyName__. All rights reserved.
//

#import "txtPageStream.h"
#import "txtRowStream.h"
#import "txtStringStream.h"
#import "txtPageInfo.h"
#import <CoreText/CoreText.h>
#import "txtLocation.h"
#import "Debug.h"

@implementation txtPageStream

@synthesize pageTochIndexDic;
@synthesize string;
@synthesize row;
@synthesize needLastRow;

@synthesize drawOriginalX = _drawOriginalX;
@synthesize drawOriginalY = _drawOriginalY;
@synthesize drawTextWidth = _drawTextWidth;
@synthesize drawTextHeight = _drawTextHeight;
@synthesize drawViewWidth = _drawViewWidth;
@synthesize drawViewHeight = _drawViewHeight;
@synthesize drawFont = _drawFont;
@synthesize lineSpacing = _lineSpacing;
@synthesize paragraphSpacing = _paragraphSpacing;
@synthesize drawColor = _drawColor;

@synthesize selectStopLocation;
@synthesize selectStartLocation;
@synthesize isSelecting;

- (id)initWithFileName:(NSString *)fileName
{
    self = [super init];
    if (self) {
        // Initialization code here.

        string = [[txtStringStream alloc] initWithFileName:fileName];
        assert(string);

        
        pageTochIndexDic = [[NSMutableDictionary alloc] init];
        pageInfoDic =[[NSMutableDictionary alloc] init];
        needLastRow = 0;
    }
    
    return self;
}

- (id) pageInfoKeyWithPageIndex:(int) pageIndex
{
    return [NSNumber numberWithInt:pageIndex];
}

- (void)pageReset
{
    [pageTochIndexDic removeAllObjects];
    [pageInfoDic removeAllObjects];
    [row rowReset];
    [string strReset];
}

- (void) setDrawColor:(UIColor *)drawColor_
{
    if (![self.drawColor isEqual:drawColor_])
    {
        [_drawColor release];
        _drawColor = [drawColor_ retain];
    }
    
    for (txtPageInfo* pageInfo in [pageInfoDic allValues])
    {
        pageInfo.drawColor = _drawColor;
    }
}
- (void) setCharactor:(int)charactorIndx
{
    @synchronized (self)
    {
        [pageTochIndexDic removeAllObjects];
        [pageInfoDic removeAllObjects];
        
        if (charactorIndx < 0)
        {
            charactorIndx = 0;
        }
        
        if (charactorIndx > [string totalCharacters])
        {
            charactorIndx = 0;
        }
        [string strReset];
        originaCharactorIndex = charactorIndx;
        firstCharactorIndex = charactorIndx;
        lastCharactorIndex = charactorIndx;
    }
}
- (int) charactor:(int)charactorIndx InPage:(int)pageIndex
{

    txtPageInfo* pageInfo = [self pageInfoAtIndex:pageIndex];
    
    if (charactorIndx >= pageInfo.startIndex && charactorIndx < pageInfo.stopIndex)
        return 0;
    else if (charactorIndx < pageInfo.startIndex)
        return -1;
    else if (charactorIndx >= pageInfo.stopIndex)
        return 1;

    return 0;
}

- (NSRange)indexToRowRange:(int)pageIndex
{

    NSRange range;
    if (pageIndex == 0)
    {
        range = NSMakeRange(0, rows);
    }
    else if (pageIndex > 0)
    {
        range = NSMakeRange(pageIndex * (rows - needLastRow), rows);
    }
    else if (pageIndex < 0)
    {
        range = NSMakeRange(pageIndex * (rows - needLastRow), rows);
    }
    
    return range;
}

- (int)firstCharactorIndexOfPage:(int)pageIndex
{    
    txtPageInfo* pageInfo = [self pageInfoAtIndex:pageIndex];
    NSAssert(pageInfo,@"");
    return pageInfo.startIndex;
}

- (int)lastCharactorIndexOfPage:(int)pageIndex
{
    txtPageInfo* pageInfo = [pageInfoDic objectForKey:[self pageInfoKeyWithPageIndex:pageIndex]];
//    NSAssert(pageInfo,@"");
    return pageInfo.stopIndex;
}

- (int)charactorIndexOfPage:(int)pageInex WithPoint:(CGPoint)point
{
    txtPageInfo* pageInfo = [self pageInfoAtIndex:pageInex];
    return [pageInfo chIndexWithPoint:point];
}

- (NSArray*)pageAtIndex:(int)pageIndex
{
    NSString* pageStartIndexStr = [NSString stringWithFormat:(@"page:%d startIndex"),pageIndex];
    NSString* pageEndIndexStr = [NSString stringWithFormat:@"page:%d endIndex",pageIndex];
    NSString* pageDicStr = [NSString stringWithFormat:@"page:%d dicArray",pageIndex];
    
    NSRange range = [self indexToRowRange:pageIndex];
    NSArray* dicArray = [row rowsWithRange:range];
    
    
    int pageStart = -1;
    int pageEnd = -1;
        
    if ([dicArray count])
    {
        pageStart = [[[dicArray objectAtIndex:0] objectForKey:@"startIndex"] intValue];
        pageEnd = [[[dicArray lastObject] objectForKey:@"endIndex"] intValue];
    }
    
    NSNumber* pageStartNew = [NSNumber numberWithInt:pageStart] ;
    NSNumber* pageEndNew = [NSNumber numberWithInt:pageEnd] ;
    
    [pageTochIndexDic setValue:pageStartNew forKey:pageStartIndexStr];
    [pageTochIndexDic setValue:pageEndNew forKey:pageEndIndexStr];
    [pageTochIndexDic setValue:dicArray forKey:pageDicStr];
    
    NSMutableArray* titleArray = [[[NSMutableArray alloc] initWithCapacity:[dicArray count]] autorelease];
    
    for (NSDictionary* dic in dicArray) 
    {
        [titleArray addObject:[dic objectForKey:@"title"]];
    }
    
    return titleArray;
}

- (void) minimizeToPageIndex:(NSInteger)pageIndex
{
	/* Uncache all pages except previous, current, and next. */
	@synchronized (pageInfoDic) 
    {
        int cutoffValueFromPageIndex = 20;
		for (NSNumber *key in [pageInfoDic allKeys])
		{
            if (ABS([key intValue] - (int)pageIndex) > cutoffValueFromPageIndex)
				[pageInfoDic removeObjectForKey:key];
        }
	}
}


- (txtPageInfo*) pageInfoAtIndex:(int)pageIndex
{
    txtPageInfo* pageInfo;
    
    //@synchronized(self)
    {
        
        if ([pageInfoDic count])
        {
            @synchronized (pageInfoDic) 
            {
                pageInfo = [pageInfoDic objectForKey:[self pageInfoKeyWithPageIndex:pageIndex]];
            }
            
            
            if (pageInfo)
            {
                return pageInfo;
            }
            else
            {
                @synchronized (self)
                {
                    txtPageInfo* prePageInfo;
                    txtPageInfo* nextPageInfo;
                    
                    @synchronized (pageInfoDic) 
                    {
                        prePageInfo = [pageInfoDic objectForKey:[self pageInfoKeyWithPageIndex:pageIndex-1]];
                    }
                    @synchronized (pageInfoDic) 
                    {
                        nextPageInfo = [pageInfoDic objectForKey:[self pageInfoKeyWithPageIndex:pageIndex+1]];
                    }
                    
                    pageInfo = [[[txtPageInfo alloc] init] autorelease];
                    pageInfo.string = string;
                    pageInfo.drawColor = self.drawColor;
                    pageInfo.drawOriginalX = self.drawOriginalX;
                    pageInfo.drawOriginalY = self.drawOriginalY;
                    pageInfo.drawTextWidth = self.drawTextWidth;
                    pageInfo.drawTextHeight = self.drawTextHeight;
                    pageInfo.drawFont = self.drawFont;
                    pageInfo.lineSpacing = self.lineSpacing;
                    pageInfo.paragraphSpacing = self.paragraphSpacing;
                    pageInfo.startPlayingIndex = NSNotFound;
                    pageInfo.stopPlayingIndex = NSNotFound;
                    pageInfo.drawViewHeight = self.drawViewHeight;
                    pageInfo.drawTextWidth = self.drawTextWidth;
                    if (prePageInfo != nil)
                    {
                        pageInfo.startIndex = prePageInfo.stopIndex;
                        pageInfo.stopIndex = NSNotFound;
                        pageInfo.tempRowInfoArray = prePageInfo.nextRowInfoArray;
                    }
                    else
                    {
                        pageInfo.startIndex = NSNotFound;
                        pageInfo.stopIndex = nextPageInfo.startIndex;
                        pageInfo.tempRowInfoArray = nextPageInfo.preRowInfoArray;
                    }
                    
                    pageInfo.selectStartLocation = self.selectStartLocation;
                    pageInfo.selectStopLocation = self.selectStopLocation;
                    
                    pageInfo.isSelecting = self.isSelecting;
                    [pageInfo sythe];
                    
                    @synchronized (pageInfoDic) 
                    {
                        [pageInfoDic setObject:pageInfo forKey:[self pageInfoKeyWithPageIndex:pageIndex]];
                    }
                    
                    
                }
                
            }
        }
        else
        {
            @synchronized (self)
            {
                pageInfo = [[[txtPageInfo alloc] init] autorelease];
                
                pageInfo.drawColor = self.drawColor;
                pageInfo.drawOriginalX = self.drawOriginalX;
                pageInfo.drawOriginalY = self.drawOriginalY;
                pageInfo.drawTextWidth = self.drawTextWidth;
                pageInfo.drawTextHeight = self.drawTextHeight;
                pageInfo.drawFont = self.drawFont;
                pageInfo.lineSpacing = self.lineSpacing;
                pageInfo.paragraphSpacing = self.paragraphSpacing;
                
                pageInfo.string = string;
                pageInfo.startIndex = originaCharactorIndex;
                pageInfo.stopIndex = NSNotFound;
                pageInfo.startPlayingIndex = NSNotFound;
                pageInfo.stopPlayingIndex = NSNotFound;
                pageInfo.drawViewHeight = self.drawViewHeight;
                pageInfo.drawTextWidth = self.drawTextWidth;
                pageInfo.isSelecting = self.isSelecting;
                
                [pageInfo sythe];
                @synchronized (pageInfoDic) 
                {
                    [pageInfoDic setObject:pageInfo forKey:[self pageInfoKeyWithPageIndex:pageIndex]];
                }
                
                
            }
        }    
        
        [self minimizeToPageIndex:pageIndex];
    }
    
    return pageInfo;
}
- (void) rowIndexAtPageIndex:(int)index 
                withStrIndex:(int)strIndex
                    rowIndex:(int*)rowIndex
            strIndexInTheRow:(int*)strIndexInTheRow
{
    int tRowIndex = -1;
    int tStrIndexInTheRow = -1;
    NSRange range = [self indexToRowRange:index];
    NSArray* dicArray = [row rowsWithRange:range];
    
    for (NSDictionary* dic in dicArray)
    {
        
        NSNumber* start = [dic objectForKey:@"startIndex"];
        NSNumber* end = [dic objectForKey:@"endIndex"];
        if (strIndex < [end intValue])
        {
            tRowIndex = [dicArray indexOfObject:dic];
            tStrIndexInTheRow = strIndex - [start intValue];
            break;
        }
    }
    
    *rowIndex = tRowIndex;
    *strIndexInTheRow = tStrIndexInTheRow;
    return ;
}
- (void) reCreateWithStartSpecIndex:(int)startSpecIndex
                  withStopSpecIndex:(int)stopSpecIndex
{
    for (txtPageInfo* pageInfo in [pageInfoDic allValues])
    {
        [pageInfo reCreateWithStartSpecIndex:startSpecIndex
                           withStopSpecIndex:stopSpecIndex];
    }
}

#pragma mark - 
#pragma mark get str
- (txtPageInfo*) pageInfoAtChIndex:(int)charactorIndex
{
    for (txtPageInfo* pageInfo in [pageInfoDic allValues])
    {
        if (pageInfo.startIndex <= charactorIndex
            && pageInfo.stopIndex > charactorIndex)
        {
            
            return pageInfo;
        }
    }
    
    assert(0);
    return nil;
}

- (NSString*) strBetweenLocation:(txtLocation*)startLocation andLocation:(txtLocation*)stopLocation;
{
    if (startLocation.charactorIndex > stopLocation.charactorIndex)
    {
        id t = startLocation;
        startLocation = stopLocation;
        stopLocation = t;
    }
    
    return [string readForwardFromCharactorIndex:startLocation.charactorIndex 
                                    limitCharNum:stopLocation.charactorIndex - startLocation.charactorIndex];
}
- (NSString*)readForwardFromCharactorIndex:(int)charactorIndex limitCharNum:(int) chNumber
{
    txtPageInfo* pageInfo = [self pageInfoAtChIndex:charactorIndex];
    CMLog(@"startIndex = %d", pageInfo.startIndex);
    CMLog(@"stopIndex = %d", pageInfo.stopIndex);
    CMLog(@"length = %d", [pageInfo.drawStr length]);
    CMLog(@"charactorIndex = %d", charactorIndex);
    
    NSString* str = nil;
    if (pageInfo) 
    {
        str = [pageInfo.drawStr substringFromIndex:charactorIndex - pageInfo.startIndex];
        if ([str length] > chNumber)
        {
            str = [str substringToIndex:chNumber];
        }
    }
    
    return str;
}

- (NSString*)readForwardFromCharactorIndex:(int)charactorIndex
{
    return [self readForwardFromCharactorIndex:charactorIndex limitCharNum:200];
}

- (NSString*)readBackwardFromCharactorIndex:(int)charactorIndex limitCharNum:(int) chNumber
{
    txtPageInfo* pageInfo = [self pageInfoAtChIndex:charactorIndex];
    
    NSString* str = nil;
    if (pageInfo) 
    {
        str = [pageInfo.drawStr substringToIndex:charactorIndex - pageInfo.startIndex];
        if ([str length] > chNumber)
        {
            str = [str substringFromIndex:[str length] - chNumber];
        }
    }
    
    return str;
}
- (NSString*)readBackwardFromCharactorIndex:(int)charactorIndex
{
    return [self readBackwardFromCharactorIndex:charactorIndex limitCharNum:200];
}

- (void) setSelectStartLocation:(id)selectStartLocation_
{
    [selectStartLocation autorelease];
    selectStartLocation = [selectStartLocation_ retain];
    for (txtPageInfo* pageInfo in [pageInfoDic allValues])
    {
        pageInfo.selectStartLocation = selectStartLocation_;
    }
}

- (void) setSelectStopLocation:(id)selectStopLocation_
{
    [selectStopLocation autorelease];
    selectStopLocation = [selectStopLocation_ retain];
    
    for (txtPageInfo* pageInfo in [pageInfoDic allValues])
    {
        pageInfo.selectStopLocation = selectStopLocation_;
    }
}

- (void) setIsSelecting:(bool)isSelecting_
{
    isSelecting = isSelecting_;
    for (txtPageInfo* pageInfo in [pageInfoDic allValues])
    {
        pageInfo.isSelecting = isSelecting_;
    }
}

- (void)dealloc
{
    SAFE_RELEASE(row);
    SAFE_RELEASE(string);
    SAFE_RELEASE(pageTochIndexDic);
    SAFE_RELEASE(pageInfoDic)
    SAFE_RELEASE(_drawFont)
    SAFE_RELEASE(_drawColor)
    
    self.selectStartLocation = nil;
    self.selectStopLocation = nil;
    [super dealloc];
}
@end