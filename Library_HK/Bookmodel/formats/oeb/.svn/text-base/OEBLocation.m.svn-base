//
//  OEBSpineTag.m
//  moonBookReader
//
//  Created by  on 11-11-1.
//  Copyright 2011å¹´ __MyCompanyName__. All rights reserved.
//

#import "OEBLocation.h"
#import "Debug.h"
#import "OEBParagraph.h"

static NSMutableDictionary* paragraphArrayFromHref = nil;
@implementation OEBLocation

@synthesize href = _href;
@synthesize paragraph;
@synthesize postion;

- (id)init
{
    self = [super init];
    if (self) {
        // Initialization code here.
    }
    
    return self;
}

- (id) initWithHref:(NSString*)hreft
{
    self = [super init];
    if (self) {
        // Initialization code here.
        self.href = hreft;
    }
    return self;
}

- (void)encodeWithCoder:(NSCoder *)aCoder 
{  
    [aCoder encodeObject:_href forKey:@"href"];
    [aCoder encodeInteger:paragraph forKey:@"paragraph"];
    [aCoder encodeInteger:postion forKey:@"postion"];
}  

- (id)initWithCoder:(NSCoder *)aDecoder
{
    if (self = [super init]) {  
        
        _href = [[aDecoder decodeObjectForKey:@"href"] retain];
        paragraph = [aDecoder decodeIntegerForKey:@"paragraph"];
        postion = [aDecoder decodeIntegerForKey:@"postion"];
    }  
    
    return self;  
}

- (void)dealloc
{
    SAFE_RELEASE(_href);
    [super dealloc];
}

- (void)printLocation 
{
    CMLog(@"--href: %@, paragraph: %d, position: %d--", self.href, self.paragraph, self.postion);
}

- (BOOL)isEqualToOEBLocation:(OEBLocation *)location 
{
    if ([self.href isEqualToString:location.href] 
        && self.paragraph == location.paragraph
        && self.postion == location.postion) 
    {
        return YES;
    }
    else
    {
        return NO;
    }
}

- (BOOL) isEqualChapter:(id)object
{
    OEBLocation* temp = (OEBLocation*)object;
    if ([self.href isEqualToString:temp.href])
    {
        return YES;
    }
    else
    {
        return NO;
    }
}
- (BOOL) isEqualLocation:(id)object
{
    OEBLocation* temp = (OEBLocation*)object;
    if ([self.href isEqualToString:temp.href] 
        && self.paragraph == temp.paragraph
        && self.postion == temp.postion)
    {
        return YES;
    }
    else
    {
        return NO;
    }
}

- (BOOL) isForwardFrom:(OEBLocation *)location
{
    assert([self.href isEqualToString:location.href]);
    
    if (location.paragraph < self.paragraph)
    {
        return YES;
    }
    else if (location.paragraph == self.paragraph && location.postion < self.postion)
    {
        return YES;
    }
    
    return NO;
}

- (BOOL) isBackwardFrom:(OEBLocation *)location
{
    if([self.href isEqualToString:location.href])
    {
        if (location.paragraph > self.paragraph)
        {
            return YES;
        }
        else if (location.paragraph == self.paragraph && location.postion > self.postion)
        {
            return YES;
        }
    }
    else
    {
        NSAssert(0,@"");
    }
    return NO;
}

- (NSString*)description 
{
    return [NSString stringWithFormat:@"--href: %@, paragraph: %d, position: %d--", self.href, self.paragraph, self.postion];
}

- (BOOL) isParagraphEnd
{
    BOOL ret = NO;
    NSArray* paragraphArray = [paragraphArrayFromHref objectForKey:self.href];
    NSAssert(paragraphArray != nil,nil);
    
    OEBParagraph* paragra = [paragraphArray objectAtIndex:self.paragraph];
    if (OEBParagraphTypeText == paragra.type 
        || OEBParagraphTypeHyperlink == paragra.type) 
    {
        OEBTextParagraph* tp = (id)paragra;
        ret = self.postion == [tp.content length];
    }
    else if (OEBParagraphTypeImage == paragra.type)
    {
        ret = self.postion == 1;
    }
    else if (OEBParagraphTypeControl == paragra.type)
    {
        NSAssert(0,nil);
    }
    
    return ret;
}
- (id) preParagraphEndLocation
{
    NSArray* paragraphArray = [paragraphArrayFromHref objectForKey:self.href];
    NSAssert(paragraphArray != nil,nil);
    
    for (int i = self.paragraph-1; i>=0; i--)
    {
        OEBParagraph* paragra = [paragraphArray objectAtIndex:i];
        if (OEBParagraphTypeText == paragra.type 
            || OEBParagraphTypeHyperlink == paragra.type) 
        {
            OEBTextParagraph* tp = (id)paragra;
            OEBLocation* location = [[[OEBLocation alloc] init] autorelease];
            location.href = self.href;
            location.paragraph = i;
            location.postion = [[tp content] length];
            return location;
        }
        else if (OEBParagraphTypeImage == paragra.type)
        {
        }
        else if (OEBParagraphTypeControl == paragra.type)
        {
        }
    }
    
    return self;
}
- (id) nextParagraphStartLocation
{
    NSArray* paragraphArray = [paragraphArrayFromHref objectForKey:self.href];
    NSAssert(paragraphArray != nil,nil);
    
    for (int i = self.paragraph+1; i<[paragraphArray count]; i++)
    {
        OEBParagraph* paragra = [paragraphArray objectAtIndex:i];
        if (OEBParagraphTypeText == paragra.type 
            || OEBParagraphTypeHyperlink == paragra.type) 
        {
            OEBLocation* location = [[[OEBLocation alloc] init] autorelease];
            location.href = self.href;
            location.paragraph = i;
            location.postion = 0;
            return location;
        }
        else if (OEBParagraphTypeImage == paragra.type)
        {
        }
        else if (OEBParagraphTypeControl == paragra.type)
        {
        }
    }
    
    return self;
}

+ (void) addParagraphArray:(id)array withHref:(NSString *)href
{
    if (paragraphArrayFromHref == nil)
    {
        paragraphArrayFromHref = [[NSMutableDictionary alloc] initWithCapacity:0];
    }
    
    [paragraphArrayFromHref setValue:array forKey:href];
}

+ (void) clearWithHref:(NSString*)href
{
    [paragraphArrayFromHref removeObjectForKey:href];
}

+ (void) clear
{
    SAFE_RELEASE(paragraphArrayFromHref)
}
@end
