//
//  OEBTypeSetting.m
//  OEBReader
//
//  Created by docin on 11-11-1.
//  Copyright 2011年 __MyCompanyName__. All rights reserved.
//

#import "OEBTextModel.h"
#import "OEBChapter.h"
#import "OEBParagraph.h"
#import "OEBCSSStyle.h"
#import "OEBRow.h"
#import "OEBRow.h"
#import "ZipArchive.h"
#import "OEBLocation.h"
#import "OEBConstant.h"
#import "Debug.h"
#import "OEBTextPageInfo.h"
#import "BookSaveFile.h"
@implementation OEBTextModel

@synthesize title;
@synthesize zipArchive;
@synthesize fileName;

@synthesize drawOriginalX;
@synthesize drawOriginalY;
@synthesize drawTextWidth;
@synthesize drawTextHeight;
@synthesize drawViewWidth;
@synthesize drawViewHeight;
@synthesize sacle;
@synthesize lineSpacing;
@synthesize paragraphSpacing;
@synthesize drawColor;
@synthesize drawFont;

@synthesize basePath;
@synthesize paragraphs;
@synthesize pageFromIndexDic;
@synthesize pageStartLocFromIndexDic;
@synthesize bookId;

- (void)createChapter
{
    if (self.paragraphs == nil)
    {
        // parse path
        NSString *fileName_ = self.fileName;
        NSString *bPath = self.basePath;
        NSRange r = [fileName_ rangeOfString:@"/" options:NSBackwardsSearch];
        if (r.length > 0) 
        {
            bPath = [basePath stringByAppendingString:[fileName_ substringToIndex:r.location + 1]];
            fileName_ = [fileName_ substringFromIndex:r.location + 1];
        }
        
        OEBChapter *chapter;
        
        @try {
            START_TIMER
            chapter = [[[OEBChapter alloc] initWithBasePath:bPath
                                               withFileName:fileName_ 
                                             withZipArchive:self.zipArchive] autorelease];
            END_TIMER(@"-----加载章节时间")
            
            self.title = chapter.title;
            self.paragraphs = chapter.paragraphs;
        }
        @catch (NSException *exception)
        {
            chapter = nil;
        }
        
        [OEBLocation addParagraphArray:self.paragraphs withHref:self.fileName];
    }
}

- (id)initWithBasePath:(NSString *)bPath 
          withFileName:(NSString *)fileName_
        withZipArchive:(ZipArchive *)file 
{
    
    self = [super init];
    if (self) {
        self.zipArchive = file;
        self.fileName = fileName_;
        self.basePath = bPath;
    }
    
    return self;
}

- (void) parsePageIndex:(int)pageIndex
{
    [self createChapter];
    
    OEBTextPageInfo* pageInfo = [[[OEBTextPageInfo alloc] init] autorelease];
    
    pageInfo.textModel = self;
    pageInfo.paragraphArray = paragraphs;
    pageInfo.startLoc = [pageStartLocFromIndexDic objectForKey:[NSNumber numberWithInt:pageIndex]];
    pageInfo.stopLoc = nil;
    pageInfo.startPlayingLocx = nil;
    pageInfo.stopPlayingLoc = nil;
    
    pageInfo.drawOriginalX = self.drawOriginalX;
    pageInfo.drawOriginalY = self.drawOriginalY;
    pageInfo.drawTextWidth = self.drawTextWidth;
    pageInfo.drawTextHeight = self.drawTextHeight;
    pageInfo.drawViewWidth = self.drawViewWidth;
    pageInfo.drawViewHeight = self.drawViewHeight;
    
    pageInfo.drawColor = self.drawColor;
    pageInfo.drawFont = self.drawFont;
    pageInfo.scale = self.sacle;
    
    pageInfo.lineSpacing = self.lineSpacing;
    pageInfo.paragraphSpacing = self.paragraphSpacing;
    
    [pageInfo prepareForPage];
    
    if (pageInfo.isValide)
    {
        [pageFromIndexDic setValue:pageInfo forKey:(id)[NSNumber numberWithInt:pageIndex]];
    }
    
    id nextStartLoc = [pageStartLocFromIndexDic objectForKey:[NSNumber numberWithInt:pageIndex+1]];
    if (nextStartLoc
        && [nextStartLoc isKindOfClass:[OEBLocation class]])
    {
        try 
        {
            if (![pageInfo.stopLoc isEqualToOEBLocation:nextStartLoc]) 
            {
                [pageInfo.stopLoc printLocation];
                [nextStartLoc printLocation];
                [NSException raise:@"" format:@""];
            }
        }
        catch (NSException *e)
        {
            [BookSaveFile deleteBookInfomation:self.bookId];
            [self parse];
        }
    }
}

- (OEBTextPageInfo*) pageWithPageIndex:(int)pageIndex
{
    if ([pageFromIndexDic count] == 0)
    {
        [self parse];
    }
    
    OEBTextPageInfo* pageInfo = [pageFromIndexDic objectForKey:[NSNumber numberWithInt:pageIndex]];
    
    if (pageInfo == nil)
    {
        [self parsePageIndex:pageIndex];
        pageInfo = [pageFromIndexDic objectForKey:[NSNumber numberWithInt:pageIndex]];
    }
    
    return pageInfo;
}

- (void)prepareForCPages:(NSArray *)paragraphArray 
{
    OEBLocation* tLoc = [[[OEBLocation alloc] initWithHref:self.fileName] autorelease];
    tLoc.paragraph = 0;
    tLoc.postion = 0;
    NSMutableArray* tempArray = nil;
    int i=0;
    while (1)
    {
        OEBTextPageInfo* pageInfo = [[[OEBTextPageInfo alloc] init] autorelease];
        
        pageInfo.textModel = self;
        pageInfo.paragraphArray = paragraphArray;
        pageInfo.startLoc = tLoc;
        pageInfo.stopLoc = nil;
        pageInfo.startPlayingLocx = nil;
        pageInfo.stopPlayingLoc = nil;
        
        pageInfo.drawOriginalX = self.drawOriginalX;
        pageInfo.drawOriginalY = self.drawOriginalY;
        pageInfo.drawTextWidth = self.drawTextWidth;
        pageInfo.drawTextHeight = self.drawTextHeight;
        pageInfo.drawViewWidth = self.drawViewWidth;
        pageInfo.drawViewHeight = self.drawViewHeight;
        
        pageInfo.drawColor = self.drawColor;
        pageInfo.drawFont = self.drawFont;
        pageInfo.scale = self.sacle;
        
        pageInfo.lineSpacing = self.lineSpacing;
        pageInfo.paragraphSpacing = self.paragraphSpacing;
        pageInfo.tempRowInfoArray = tempArray;
        [pageInfo prepareForPage];
        tempArray = pageInfo.nextRowInfoArray;
        tLoc = pageInfo.stopLoc;
        
        if (pageInfo.isValide)
        {
            [pageFromIndexDic setValue:pageInfo forKey:(id)[NSNumber numberWithInt:i]];
            [pageStartLocFromIndexDic setValue:pageInfo.startLoc forKey:(id)[NSNumber numberWithInt:i++]];
        }
        else
        {
            break;
        }
        
    }
    
    //    NSString* debugString = [NSString stringWithFormat:@"%d_%@_%@_%d_%d",self.bookId,self.fileName,self.drawFont.fontName,self.drawFont.pointSize,[pageStartLocFromIndexDic count]];
    //    [pageStartLocFromIndexDic setValue:debugString forKey:(id)[NSNumber numberWithInt:[pageStartLocFromIndexDic count]+1]];
    
    CMLog(@"**************************************")
    //    CMLog(@"%@",debugString);
    CMLog(@"%f",self.drawFont.pointSize);
    CMLog(@"%d",[pageStartLocFromIndexDic count]);
    START_TIMER
    [BookSaveFile writePageStartLocFromIndex:pageStartLocFromIndexDic
                                  WithBookId:self.bookId
                                withFileName:self.fileName
                                withDrawFont:self.drawFont
                             withLineSpacing:self.lineSpacing
                        withParagraphSpacing:self.paragraphSpacing
                                withDrawSize:CGSizeMake(self.drawTextWidth, self.drawTextHeight)];
    END_TIMER(@"writePageStartLocFromIndex")
}

- (UIImage*) imageWithPath:(NSString*)path_
{
    NSData* data = [zipArchive readFileWithPath:path_];
    
    UIImage* image = nil;
    if (data && [data length])
    {
        image = [UIImage imageWithData:data];
    }
    
    return image;
}

- (void) parse
{
    START_TIMER
    self.pageStartLocFromIndexDic = [BookSaveFile readPageStartLocFromIndexWithBookId:self.bookId 
                                                                         withFileName:self.fileName
                                                                         withDrawFont:self.drawFont
                                                                      withLineSpacing:self.lineSpacing
                                                                 withParagraphSpacing:self.paragraphSpacing
                                                                         withDrawSize:CGSizeMake(self.drawTextWidth, self.drawTextHeight)];
    END_TIMER(@"readPageStartLocFromIndexWithBookId")
    
    if (pageStartLocFromIndexDic == nil)
    {
        self.pageStartLocFromIndexDic = [[[NSMutableDictionary alloc] initWithCapacity:0] autorelease];
    }
    //    else
    //    {
    //        NSString* debugString = [pageStartLocFromIndexDic objectForKey:[NSNumber numberWithInt:[pageStartLocFromIndexDic count]+1]];
    //        
    //        CMLog(@"**************************************")
    //        CMLog(@"%@",debugString);
    //        CMLog(@"%f",self.drawFont.pointSize);
    //        CMLog(@"%d",[pageStartLocFromIndexDic count]);
    //    }
    self.pageFromIndexDic = [[[NSMutableDictionary alloc] initWithCapacity:0] autorelease];
    
    START_TIMER
    if ([pageStartLocFromIndexDic count])
    {
        
    }
    else
    {
        [self createChapter];
        [self prepareForCPages:paragraphs];
    }
    END_TIMER(@"parse")
}

- (void) drawPage:(int)pageIndex
         drawMode:(int)drawMode 
  StartPlayingLoc:(id)startPlayingLoc
   StopPlayingLoc:(id)stopPlayingLoc
      WithContext:(CGContextRef)context
{
    OEBTextPageInfo* pageInfo = [self pageWithPageIndex:pageIndex];
    
    if (pageInfo)
    {
        [pageInfo drawPageInContext:context
                       bookDrawMode:drawMode
                    StartPlayingLoc:startPlayingLoc
                     StopPlayingLoc:stopPlayingLoc]; 
    }
    else
    {   
        float viewHeight = self.drawViewHeight;
        CGContextTranslateCTM(context, 0, viewHeight);
        CGContextScaleCTM(context, 1.0, -1.0); 
        [self.drawColor set];
        NSString* erro = @"该章节已损坏";
        
        UIFont* font = [UIFont systemFontOfSize:16];
        [erro drawAtPoint:CGPointMake(kReaderTextOriginaX,kReaderTextOriginaY) withFont:font];
        CGContextScaleCTM(context, 1.0, -1.0); 
        CGContextTranslateCTM(context,0,-viewHeight);
        
        
    }
}

- (NSUInteger)pageCount 
{    
    if ([pageFromIndexDic count] == 0)
    {
        [self parse];
    }
    return MAX(MAX(1, [pageFromIndexDic count]),MAX(1, [pageStartLocFromIndexDic count]));
}

- (UIImage *)imageWithPoint:(CGPoint)point withPageIndex:(NSInteger)index
{
    OEBTextPageInfo* pageInfo = [self pageWithPageIndex:index];
    
    UIImage* image = [pageInfo imageWithPoint:point];
    
    return image;
}

- (NSInteger)pageIndexWithLocation:(OEBLocation *)location
{   
    if ([pageFromIndexDic count] == 0)
    {
        [self parse];
    }
    
    int pageIndex = 0;
    int i=0;
    while (1)
    {
        i++;
        OEBLocation* stopLocation = [pageStartLocFromIndexDic objectForKey:[NSNumber numberWithInt:i]];
        
        if (stopLocation == nil)
        {
            pageIndex = i - 1;
            break;
        }
        
        if ([location isBackwardFrom:stopLocation])
        {
            pageIndex = i - 1;
            break;
        }
    }
    
    return pageIndex;
}

- (NSString*) strBetweenLocation:(OEBLocation*)startLocation andLocation:(OEBLocation*)stopLocation
{
    NSAssert([startLocation.href isEqualToString:stopLocation.href], @"");
    NSAssert(![startLocation isForwardFrom:stopLocation], @"");
    
    NSMutableString *str = [[[NSMutableString alloc] init] autorelease];
    
    NSUInteger count = [paragraphs count];
    NSUInteger pos = startLocation.postion;
    
    for (NSUInteger i = startLocation.paragraph; i <= stopLocation.paragraph; ++i)
    {
        unsigned int number = i == stopLocation.paragraph? stopLocation.postion - pos : NSNotFound;
        OEBParagraph *paragraph = [paragraphs objectAtIndex:i];
        if (OEBParagraphTypeImage == paragraph.type) 
        {
            continue;
        }
        else if (OEBParagraphTypeControl == paragraph.type) 
        {
            continue;
        }
        
        OEBTextParagraph *textP = (OEBTextParagraph *)paragraph;
        NSString *content = [textP content];
        NSUInteger length = [content length];
        
        if (pos == 0 && ((OEBTextParagraph*)paragraph).textStyle.textIndent)
        {   
            [str appendString:@"    "];
        }
        
        if (length > 0 && pos < length) 
        {
            if (number <= length - pos) 
            {
                [str appendString:[content substringWithRange:NSMakeRange(pos, number)]];
                break;
            } 
            else 
            {
                [str appendString:[content substringWithRange:NSMakeRange(pos, length - pos)]];
                
                BOOL needBr = NO;
                for (NSUInteger j = i+1; j < count; ++j)
                {
                   OEBParagraph* nextParagraph = [paragraphs objectAtIndex:j];
                    if (nextParagraph.type == OEBParagraphTypeText
                        || nextParagraph.type == OEBParagraphTypeHyperlink)
                    {
                        break;
                    }
                    else if (OEBParagraphTypeControl == nextParagraph.type) 
                    {
                        OEBControlParagraph *ctrlP = (OEBControlParagraph *)nextParagraph;
                        
                        if ([HTMLNamesInstance isTextWithTag:ctrlP.controlType])
                        {
                            needBr = YES;
                            break;
                        }
                    }
                }
                
                if (needBr)
                {
                    [str appendString:@"\n"];
                }
                
            }
        }
        
        pos = 0;
    }
    
    return str;
}

- (NSString *)strForwardWithLocation:(OEBLocation *)location {
    return [self strForwardWithLocation:location limitNumber:100];
}

- (NSString *)strForwardWithLocation:(OEBLocation *)location limitNumber:(NSInteger)number 
{
    assert(nil != location);
    assert(0 != number);
    
    NSMutableString *str = [[[NSMutableString alloc] init] autorelease];
    
    NSUInteger count = [paragraphs count];
    NSUInteger pos = location.postion;
    for (NSUInteger i = location.paragraph; i < count; ++i) {
        OEBParagraph *paragraph = [paragraphs objectAtIndex:i];
        if (OEBParagraphTypeImage == paragraph.type) 
        {
            continue;
        }
        else if (OEBParagraphTypeControl == paragraph.type) 
        {
            OEBControlParagraph *ctrlP = (OEBControlParagraph *)paragraph;
            if (!ctrlP.isStart 
                && [HTMLNamesInstance isTextWithTag:ctrlP.controlType]
                && [str length] > 0) 
            {
                break;
            } 
            else 
            {
                continue;
            }
        }
        
        OEBTextParagraph *textP = (OEBTextParagraph *)paragraph;
        NSString *content = [textP content];
        NSUInteger length = [content length];
        
        if (length > 0 && pos < length) 
        {
            if (number <= length - pos) 
            {
                [str appendString:[content substringWithRange:NSMakeRange(pos, number)]];
                break;
            } 
            else 
            {
                [str appendString:[content substringWithRange:NSMakeRange(pos, length - pos)]];
                number = number - (length - pos);
            }
        }
        
        pos = 0;
    }
    
    return str;
}

- (NSString *)strBackwardWithLocation:(OEBLocation *)location limitNumber:(NSInteger)number 
{
    assert(nil != location);
    assert(0 != number);
    
    NSString* str = @"";
    
    NSUInteger pos = location.postion;
    
    for (int i = location.paragraph; i >= 0; --i)
    {
        OEBParagraph *paragraph = [paragraphs objectAtIndex:i];
        if (OEBParagraphTypeImage == paragraph.type) 
        {
            continue;
        }
        else if (OEBParagraphTypeControl == paragraph.type) 
        {
            OEBControlParagraph *ctrlP = (OEBControlParagraph *)paragraph;
            if (!ctrlP.isStart 
                && [HTMLNamesInstance isTextWithTag:ctrlP.controlType]
                && [str length] > 0) 
            {
                break;
            } 
            else 
            {
                continue;
            }
        }
        
        OEBTextParagraph *textP = (OEBTextParagraph *)paragraph;
        NSString *content = [textP content];
        NSUInteger length = [content length];
        if (pos == NSNotFound)
        {
            pos = length;
        }
        
        if (length > 0) 
        {
            if (pos == NSNotFound)
            {
                str = [content stringByAppendingString:str];
            }
            else
            {
                str = [[content substringToIndex:pos] stringByAppendingString:str];
            }
            break;
        }
        
        pos = NSNotFound;
    }
    
    return str;
}

- (OEBLocation *) _locationForForward:(OEBLocation *)location withLength:(NSInteger)strLength {
    if (nil == location)
    {
        @throw [NSException exceptionWithName:NSInvalidArgumentException reason:@"location is null!" userInfo:nil];
    }
    if (0 == strLength) 
    {
        return location;
    }
    
    OEBLocation *newLocation = [[[OEBLocation alloc] init] autorelease];
    newLocation.href = self.fileName;
    newLocation.paragraph = location.paragraph;
    newLocation.postion = location.postion;
    
    NSUInteger count = [paragraphs count];
    if (0 == count) 
    {
        return nil;
    }
    
    NSUInteger pos = location.postion;
    for (NSUInteger i = location.paragraph; i < count; ++i) 
    {
        OEBParagraph *paragraph = [paragraphs objectAtIndex:i];
        if (OEBParagraphTypeImage == paragraph.type 
            || OEBParagraphTypeControl == paragraph.type) 
        {
            continue;
        }
        
        OEBTextParagraph *textP = (OEBTextParagraph *)paragraph;
        NSString *content = [textP content];
        NSUInteger length = [content length];
        if (length > 0) 
        {
            newLocation.paragraph = i;
            if (strLength < length - pos) 
            {
                newLocation.postion = pos + strLength;
                break;
            }
            else
            {
                newLocation.postion = length;
                strLength = strLength - (length - pos);
            }
            
            if (strLength == 0)
            {
                break;
            }
        }
        pos = 0;
    }
    
    if ([location isEqualToOEBLocation:newLocation]) 
    {
        @throw [NSException exceptionWithName:NSInvalidArgumentException reason:@"two locations is equal!" userInfo:nil]; 
    }
    return newLocation;
}

- (OEBLocation *) locationForForward:(OEBLocation *)location withLength:(NSInteger)strLength 
{
    OEBLocation *loc = [self _locationForForward:location withLength:strLength];
    if (nil == loc)
    {
        OEBLocation *newLocation = [[[OEBLocation alloc] init] autorelease];
        newLocation.href = self.fileName;
        newLocation.paragraph = location.paragraph;
        newLocation.postion = location.postion;
        loc = newLocation;
    }
    return loc;
}

- (OEBLocation *)_locationForBackward:(OEBLocation *)location withLength:(NSInteger)strLength 
{    
    if (nil == location) {
        @throw [NSException exceptionWithName:NSInvalidArgumentException reason:@"location is null!" userInfo:nil];
    }
    if (0 == strLength) {
        return location;
    }
    
    OEBLocation *newLocation = [[[OEBLocation alloc] init] autorelease];
    newLocation.href = self.fileName;
    newLocation.paragraph = location.paragraph;
    newLocation.postion = location.postion;
    
    NSUInteger count = [paragraphs count];
    if (0 == count) {
        return nil;
    }
    
    NSUInteger pos = location.postion;
    for (NSInteger i = location.paragraph; i >= 0; --i)
    {
        OEBParagraph *paragraph = [paragraphs objectAtIndex:i];
        if (OEBParagraphTypeImage == paragraph.type 
            || OEBParagraphTypeControl == paragraph.type) {
            continue;
        }
        
        OEBTextParagraph *textP = (OEBTextParagraph *)paragraph;
        NSString *content = [textP content];
        NSUInteger length = [content length];
        
        if (pos == NSNotFound)
        {
            pos = length;
        }
        
        newLocation.paragraph = i;
        
        if (strLength <= pos) 
        {
            newLocation.postion = pos - strLength;
            break;
        }
        else
        {
            newLocation.postion = 0;
            strLength = strLength - pos;
        }
        
        pos = NSNotFound;
    }
    
    if ([location isEqualToOEBLocation:newLocation]) {
        @throw [NSException exceptionWithName:NSInvalidArgumentException reason:@"two locations is equal!" userInfo:nil]; 
    }
    return newLocation;
}

- (OEBLocation *)locationForBackward:(OEBLocation *)location withLength:(NSInteger)length 
{
    OEBLocation *loc = [self _locationForBackward:location withLength:length];
    
    if (nil == loc)
    {
        OEBLocation *newLocation = [[[OEBLocation alloc] init] autorelease];
        newLocation.href = self.fileName;
        newLocation.paragraph = location.paragraph;
        newLocation.postion = location.postion;
        loc = newLocation;
    }
    return loc;
}

- (NSInteger) stringLengthFromLocation:(OEBLocation *)start toLocation:(OEBLocation *)end 
{
    if (start.paragraph > end.paragraph) {
        return 0;
    }
    
    if (start.paragraph == end.paragraph) {
        if (start.postion >= end.postion) {
            return 0;
        } else {
            return (end.postion - start.postion);
        }
    }
    
    NSInteger length = 0;
    for (NSUInteger i = start.paragraph; i <= end.paragraph; ++i) 
    {
        OEBParagraph *p = [paragraphs objectAtIndex:i];
        if (OEBParagraphTypeText == p.type 
            || OEBParagraphTypeHyperlink == p.type) 
        {
            OEBTextParagraph *textP = (OEBTextParagraph *)p;
            NSUInteger len = [[textP content] length];
            
            if (i == start.paragraph)
            {
                length += len - start.postion;
            } 
            else if(i == end.paragraph) 
            {
                length += end.postion;
            } 
            else 
            {
                length += len;
            }
            
        }
    }
    
    return length;
}

- (OEBLocation *)startLocationWithPageIndex:(NSInteger)pageIndex 
{
    return [self.pageStartLocFromIndexDic objectForKey:[NSNumber numberWithInt:pageIndex]];
}

- (OEBLocation *)endLocationWithPageIndex:(NSInteger)pageIndex
{ 
    return [[self pageWithPageIndex:pageIndex] stopLoc];
}

- (void) clearCach
{
    SAFE_RELEASE(pageFromIndexDic)
    SAFE_RELEASE(pageStartLocFromIndexDic)
}

//@synthesize selectStopLocation;
//@synthesize selectStartLocation;
//@synthesize isSelecting;

#pragma mark-
#pragma mark set
- (void) setSelectStartLocation:(id)selectStartLocation_
{   
    [super setSelectStartLocation:selectStartLocation_];
//    [selectStartLocation autorelease];
//    selectStartLocation = [selectStartLocation_ retain];
    
    if ([self.selectStartLocation isParagraphEnd])
    {
        id tLoc = [self.selectStartLocation nextParagraphStartLocation];
        if (tLoc != self.selectStartLocation)
        {
            self.selectStartLocation = tLoc;
        }
    }
    
    for (OEBTextPageInfo* pageInfo in [pageFromIndexDic allValues])
    {
        pageInfo.selectStartLocation = selectStartLocation_;
    }
}

- (void) setSelectStopLocation:(id)selectStopLocation_
{
    [super setSelectStopLocation:selectStopLocation_];
//    [selectStopLocation autorelease];
//    selectStopLocation = [selectStopLocation_ retain];
    
    if ([self.selectStopLocation postion] == 0)
    {
        id tLoc = [self.selectStopLocation preParagraphEndLocation];
        if (tLoc != self.selectStopLocation)
        {
            self.selectStopLocation = tLoc;
        }
    }
    
    for (OEBTextPageInfo* pageInfo in [pageFromIndexDic allValues])
    {
        pageInfo.selectStopLocation = selectStopLocation_;
    }
}

- (void) setIsSelecting:(bool)isSelecting_
{
    [super setIsSelecting:isSelecting_];
//    isSelecting = isSelecting_;
    for (OEBTextPageInfo* pageInfo in [pageFromIndexDic allValues])
    {
        pageInfo.isSelecting = isSelecting_;
    }
}

- (void)dealloc 
{   
    SAFE_RELEASE(paragraphs)
    SAFE_RELEASE(zipArchive)
    SAFE_RELEASE(fileName)
    SAFE_RELEASE(basePath)
    SAFE_RELEASE(title)
    SAFE_RELEASE(pageFromIndexDic)
    SAFE_RELEASE(pageStartLocFromIndexDic)
    
//    SAFE_RELEASE(selectStartLocation)
//    SAFE_RELEASE(selectStopLocation)
    [super dealloc];
}
@end
